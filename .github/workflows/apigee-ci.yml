
name: Apigee CI with Maven

on: push
  
env:
  API_VERSION: googleapi 
  # or 
  #API_VERSION: apigeeapi

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
  DEFAULT_APIGEE_ORG: bap-emea-apigee-5
  DEFAULT_APIGEE_ENV: default-dev
  TEST_HOST: 34.117.38.184.nip.io

  # Retrieve Apigee UserID and password from repository settings (secrets)
  APIGEE_CREDS_USR: ${{ secrets.APIGEE_CREDS_USR }}
  APIGEE_CREDS_PSW: ${{ secrets.APIGEE_CREDS_PSW }}

  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  # These variables will be dynamically defined in [Set Variables *] steps
  GIT_BRANCH: ''
  AUTHOR_EMAIL: ''
  APIGEE_ORG: ''
  APIGEE_ENV: ''
  APIGEE_DEPLOYMENT_SUFFIX: ''
  
jobs:
  Apigee-Deploy:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

  # Set Variables depending on branch
      - name: Set Variables for [Main] branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV

      - name: Set Variables for [Prod] branch
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=prod)" >> $GITHUB_ENV
  
      - name: Set Variables for branch not [Main], not [Prod]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/prod'
        run: |
          echo "APIGEE_DEPLOYMENT_SUFFIX=$(echo $GITHUB_REF | sed 's/.*\///')" >> $GITHUB_ENV
          echo "AUTHOR_EMAIL=$(echo $GITHUB_ACTOR)" >> $GITHUB_ENV
          echo "APIGEE_ORG=$(echo $DEFAULT_APIGEE_ORG)" >> $GITHUB_ENV
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV


  # Create Dependencies (npm) Cache 
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` 
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


  # Install dependencies (npm)
  #    - name: Install Dependencies
  #      run: npm install --silent --no-fund

  # Run Spectral
      - name: OAS-validation-spectral
        uses: stoplightio/spectral-action@latest
        with:
          file_glob: 'spec/airport-1.0.0.yaml'
          spectral_ruleset: ./test/spectral/.spectral.yaml

  # spectral lint -r ./test/spectral/.spectral.yaml -f html -o spectral-report.html ./specs/airport-1.0.0.yaml  || true  # catch all errors for demo purpose 

